#! perl

use strict;

sub load {
	open my $fh, $_[0]
		or die "open $_[0] failed: $!";
	[<$fh>]
}

sub loadbin {
	open my $fh, $_[0]
		or die "open $_[0] failed: $!";
	binmode $fh;
	local $/;
	
	my $bin = <$fh>;
	my $hex = unpack "H*", $bin;
	my @hex;
	
	while (1) {
		my $str = substr $hex, 0, 64, "";
		last unless $str;
		push @hex, $str;
	}
	
	\@hex
}

sub rls {
	my ($base) = @_;
	my @files;

	my $rec; $rec = sub {
		my ($dir) = @_;
	
		opendir my $dh, $dir
			or die "opendir $dir failed: $!";

		while (my $file = readdir $dh) {
			next if $file eq "." || $file eq "..";

			if (-d "$dir/$file") {
				$rec->("$dir/$file");
			} else {
				my $rel = "$dir/$file";

				$rel =~ s/^\Q$base\E//;
				$rel =~ s/\\/\//g;

				push @files, $rel;
			}
		}
	};
	
	$rec->($base);
	
	\@files
}

sub unload {
	open my $fh, ">$_[0]"
		or die "open $_[0] failed: $!";
	print $fh $_ for @{ $_[1] }
}

die "usage: $0 <static-dir> <in-js-file> <out-js-file>\n"
	unless @ARGV == 3;

my ($dir, $in, $out) = @ARGV;

my $js = load $in;
my $ls = rls $dir;

my @text = ("\n\n");

for (@$ls) {
	my $hex = loadbin "$dir/$_";
	push @text, "files[\"$_\"] = [\n";
	push @text, "	\"$_\",\n"
		for @$hex;
	push @text, "];\n\n";
}

push @$js, $_ for @text;
unload $out, $js;
